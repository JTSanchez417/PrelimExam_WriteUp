import cv2
import numpy as np
import time
import matplotlib.pyplot as plt

# Function to apply Laplacian convolution
def apply_laplacian_serial(image):
    # Define a Laplacian kernel
    laplacian_kernel = np.array([[0, 1, 0],
                                 [1, -4, 1],
                                 [0, 1, 0]])

    # Get image dimensions
    rows, cols = image.shape

    # Create an empty image to store the result
    output_image = np.zeros_like(image)

    # Apply convolution
    for i in range(1, rows - 1):
        for j in range(1, cols - 1):
            # Extract 3x3 region
            region = image[i - 1:i + 2, j - 1:j + 2]
            # Apply the kernel
            output_image[i, j] = np.sum(region * laplacian_kernel)

    return output_image

def main():
    # Load a sample image from dataset (grayscale for simplicity)
    image = cv2.imread('/content/drive/MyDrive/train/cat.0.jpg', cv2.IMREAD_GRAYSCALE)

    if image is None:
        print("Error: Could not load image.")
        return

    # Display original image
    plt.subplot(1, 2, 1)
    plt.imshow(image, cmap='gray')
    plt.title('Original Image')

    # Start timer
    start_time = time.time()

    # Apply Laplacian convolution (serial processing)
    laplacian_image = apply_laplacian_serial(image)

    # End timer
    end_time = time.time()

    # Calculate total processing time
    processing_time = end_time - start_time
    print(f"Total processing time (serial): {processing_time:.6f} seconds")

    # Display Laplacian filtered image
    plt.subplot(1, 2, 2)
    plt.imshow(laplacian_image, cmap='gray')
    plt.title('Laplacian Filtered Image')

    plt.show()

if __name__ == "__main__":
    main()
